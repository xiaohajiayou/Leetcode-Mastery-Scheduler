{"version":3,"file":"background.js","mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,YAAY,oCAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yDAAyD,wBAAwB;AACjF,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa,oBAAoB,4BAA4B;AACvF;AACA;AACA;AACA,cAAc,qBAAqB;AACnC,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,2BAA2B,mDAAmD;AAC9E,UAAU;AACV;AACA,2BAA2B,0EAA0E;AACrG;AACA,qBAAqB;AACrB;AACA,CAAC,E","sources":["webpack://Leetcode-Mastery-Scheduler/./src/background/background.js"],"sourcesContent":["console.log('Background service worker started');\n\n// 默认配置\nconst DEFAULT_SETTINGS = {\n    reminderEnabled: false,\n    reminderInterval: 60, // 默认60分钟\n    reminderStartTime: '09:00',\n    reminderEndTime: '22:00',\n    reminderDays: [1, 2, 3, 4, 5, 6, 0] // 默认每天\n};\n\n// 初始化扩展\nchrome.runtime.onInstalled.addListener(async () => {\n    console.log('Extension installed/updated');\n    \n    // 在 Manifest V3 中，notifications 权限在 manifest 中声明后直接可用\n    console.log('Notifications API ready');\n    \n    // 初始化设置\n    const settings = await chrome.storage.local.get(Object.keys(DEFAULT_SETTINGS));\n    const needsInit = Object.keys(DEFAULT_SETTINGS).some(key => !(key in settings));\n    \n    if (needsInit) {\n        await chrome.storage.local.set(DEFAULT_SETTINGS);\n        console.log('Initialized default settings');\n    }\n    \n    // 设置定时器\n    setupAlarms();\n});\n\n// 监听存储变化\nchrome.storage.onChanged.addListener((changes, namespace) => {\n    if (namespace === 'local' && changes.reminderEnabled) {\n        console.log('Reminder setting changed:', changes.reminderEnabled.newValue);\n        setupAlarms();\n    }\n});\n\n// 设置闹钟\nasync function setupAlarms() {\n    const { reminderEnabled, reminderInterval } = await chrome.storage.local.get([\n        'reminderEnabled',\n        'reminderInterval'\n    ]);\n    \n    // 清除现有闹钟\n    await chrome.alarms.clear('dailyReminder');\n    \n    if (reminderEnabled) {\n        // 创建周期性闹钟\n        chrome.alarms.create('dailyReminder', {\n            delayInMinutes: 1, // 1分钟后首次触发\n            periodInMinutes: reminderInterval || 60\n        });\n        console.log(`Reminder alarm set with interval: ${reminderInterval || 60} minutes`);\n    } else {\n        console.log('Reminder disabled, alarms cleared');\n    }\n}\n\n// 监听闹钟\nchrome.alarms.onAlarm.addListener(async (alarm) => {\n    if (alarm.name === 'dailyReminder') {\n        await checkAndShowReminder();\n    }\n});\n\n// 检查并显示提醒\nasync function checkAndShowReminder() {\n    const settings = await chrome.storage.local.get([\n        'reminderEnabled',\n        'reminderStartTime',\n        'reminderEndTime',\n        'reminderDays',\n        'lastReminderTime',\n        'nextReminderDelay'\n    ]);\n    \n    if (!settings.reminderEnabled) {\n        return;\n    }\n    \n    // 检查时间范围\n    const now = new Date();\n    const currentDay = now.getDay();\n    const currentTime = now.getHours() * 60 + now.getMinutes();\n    \n    // 检查是否在允许的日期\n    const reminderDays = settings.reminderDays || DEFAULT_SETTINGS.reminderDays;\n    if (!reminderDays.includes(currentDay)) {\n        console.log('Not a reminder day');\n        return;\n    }\n    \n    // 检查是否在允许的时间范围\n    const startTime = parseTime(settings.reminderStartTime || DEFAULT_SETTINGS.reminderStartTime);\n    const endTime = parseTime(settings.reminderEndTime || DEFAULT_SETTINGS.reminderEndTime);\n    \n    if (currentTime < startTime || currentTime > endTime) {\n        console.log('Outside reminder time range');\n        return;\n    }\n    \n    // 检查延迟\n    const lastReminderTime = settings.lastReminderTime || 0;\n    const nextReminderDelay = settings.nextReminderDelay || 0;\n    \n    if (nextReminderDelay > 0 && (now.getTime() - lastReminderTime) < nextReminderDelay) {\n        console.log('Still in delay period');\n        return;\n    }\n    \n    // 获取待复习题目数量\n    const problems = await getReviewProblems();\n    const reviewCount = problems.length;\n    \n    if (reviewCount > 0) {\n        console.log(`Found ${reviewCount} problems need review today`);\n        // 显示通知\n        showNotification(reviewCount);\n        \n        // 更新最后提醒时间\n        await chrome.storage.local.set({\n            lastReminderTime: now.getTime(),\n            nextReminderDelay: 0\n        });\n    } else {\n        console.log('All problems for today have been reviewed!');\n    }\n}\n\n// 解析时间字符串\nfunction parseTime(timeStr) {\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    return hours * 60 + minutes;\n}\n\n// 获取待复习题目（未完成的）\nasync function getReviewProblems() {\n    try {\n        const { problems } = await chrome.storage.local.get('problems');\n        if (!problems || !Array.isArray(problems)) {\n            return [];\n        }\n        \n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        // 过滤出今天需要复习但还未复习的题目\n        return problems.filter(problem => {\n            // 跳过已删除的题目\n            if (problem.isDeleted) return false;\n            \n            // 检查是否有 FSRS 状态\n            if (!problem.fsrsState) return false;\n            \n            // 检查是否今天已经复习过\n            if (problem.fsrsState.lastReview) {\n                const lastReview = new Date(problem.fsrsState.lastReview);\n                lastReview.setHours(0, 0, 0, 0);\n                // 如果今天已经复习过，则不需要提醒\n                if (lastReview.getTime() === today.getTime()) {\n                    return false;\n                }\n            }\n            \n            // 检查是否到了复习时间\n            if (problem.fsrsState.nextReview) {\n                const nextReview = new Date(problem.fsrsState.nextReview);\n                nextReview.setHours(0, 0, 0, 0);\n                // 如果复习时间是今天或之前，需要复习\n                return nextReview.getTime() <= today.getTime();\n            }\n            \n            return false;\n        });\n    } catch (error) {\n        console.error('Error getting review problems:', error);\n        return [];\n    }\n}\n\n// 显示通知\nasync function showNotification(reviewCount, isTest = false) {\n    // 先清除旧的通知（如果存在）\n    try {\n        await chrome.notifications.clear('leetcodeReminder');\n    } catch (error) {\n        // 忽略清除错误\n    }\n    \n    // 为测试通知使用不同的 ID，避免冲突\n    const notificationId = isTest ? `leetcodeTest_${Date.now()}` : 'leetcodeReminder';\n    \n    const notificationOptions = {\n        type: 'basic',\n        iconUrl: chrome.runtime.getURL('assets/bear.png'),\n        title: isTest ? '🎉 Test Notification' : 'LeetCode Review Reminder',\n        message: isTest \n            ? 'Great! Notifications are working properly. When enabled, you\\'ll receive reminders about your LeetCode review tasks at your scheduled intervals.'\n            : `You have ${reviewCount} unfinished problem${reviewCount > 1 ? 's' : ''} to review today. Keep your skills sharp!`,\n        priority: 2,\n        requireInteraction: !isTest, // 测试通知不需要手动关闭\n        buttons: isTest ? [] : [\n            { title: 'Review Now' },\n            { title: 'Remind in 30 min' }\n        ]\n    };\n    \n    chrome.notifications.create(notificationId, notificationOptions, (createdId) => {\n        if (chrome.runtime.lastError) {\n            console.error('Notification error:', chrome.runtime.lastError);\n        } else {\n            console.log('Notification created:', createdId);\n            // 测试通知60秒后自动清除\n            if (isTest) {\n                setTimeout(() => {\n                    chrome.notifications.clear(createdId);\n                }, 60000);  // 改为60秒（1分钟）\n            }\n        }\n    });\n}\n\n// 处理通知点击\nchrome.notifications.onClicked.addListener((notificationId) => {\n    if (notificationId === 'leetcodeReminder') {\n        // 打开扩展弹窗\n        chrome.action.openPopup();\n        chrome.notifications.clear(notificationId);\n    }\n});\n\n// 处理通知按钮点击\nchrome.notifications.onButtonClicked.addListener(async (notificationId, buttonIndex) => {\n    if (notificationId === 'leetcodeReminder') {\n        if (buttonIndex === 0) {\n            // Review Now - 打开扩展\n            chrome.action.openPopup();\n        } else if (buttonIndex === 1) {\n            // Remind Later - 延迟30分钟\n            const delay = 30 * 60 * 1000; // 30分钟\n            await chrome.storage.local.set({\n                lastReminderTime: Date.now(),\n                nextReminderDelay: delay\n            });\n            console.log('Reminder delayed for 30 minutes');\n        }\n        chrome.notifications.clear(notificationId);\n    }\n});\n\n// 监听来自popup的消息\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === 'testNotification') {\n        // 在 Manifest V3 中，notifications 权限在 manifest 中声明后直接可用\n        try {\n            showNotification(5, true); // true 表示这是测试通知\n            sendResponse({ success: true, message: 'Test notification sent!' });\n        } catch (error) {\n            console.error('Error showing notification:', error);\n            sendResponse({ success: false, message: 'Failed to show notification: ' + error.message });\n        }\n        return true; // 保持消息通道开放\n    }\n});"],"names":[],"sourceRoot":""}